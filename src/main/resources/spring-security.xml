<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<!-- Spring-Security 的配置 -->
	<!-- oauth的配置 -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"  
		>
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>
	<bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
		<property name="tokenServices" ref="tokenServices" />
	</bean>
	
	<!-- clientDetailservice -->
	<!--  <oauth:client-details-service id="clientDetails">
		<oauth:client client-id="my-trusted-client"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"
			access-token-validity="60" />
		<oauth:client client-id="my-trusted-client-with-secret"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />
		<oauth:client client-id="my-client-with-secret"
			authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"
			scope="read" secret="secret" />
		<oauth:client client-id="my-less-trusted-client"
			authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT" />
		<oauth:client client-id="my-less-trusted-autoapprove-client"
			authorized-grant-types="implicit" authorities="ROLE_CLIENT" />
		<oauth:client client-id="my-client-with-registered-redirect"
			authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value"
			scope="read,trust" />
		<oauth:client client-id="my-untrusted-client-with-registered-redirect"
			authorized-grant-types="authorization_code" authorities="ROLE_CLIENT"
			redirect-uri="http://anywhere" scope="read" />
		<oauth:client client-id="hhgapp" resource-ids="oauth"
			authorized-grant-types="authorization_code,password,implicit" authorities="ROLE_CLIENT"
			scope="read,write,trust" secret="secret" />
		<oauth:client client-id="honr" resource-ids="oauth"
			authorized-grant-types="authorization_code,password,implicit" authorities="ROLE_CLIENT"
			scope="read,write,trust" secret="secret" />
	</oauth:client-details-service>  -->
	 <bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">  
	    <constructor-arg index="0" ref="dataSource"/>  
	</bean>   
	<!-- neicun token -->
	<!-- <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" /> -->
	<!-- jdbc token -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">  
    	<constructor-arg index="0" ref="dataSource"/>  
	</bean>  
	<!-- token Service -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
	   <property name="tokenStore" ref="tokenStore" />
	   <property name="supportRefreshToken" value="true" />
	   <property name="clientDetailsService" ref="clientDetails"/>
	</bean>
	
	<!-- url for oauth token -->
	<security:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
		entry-point-ref="oauthAuthenticationEntryPoint" >
	   <security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
	   <security:anonymous enabled="false" />
	   <security:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
	   <!-- include this only if you need to authenticate clients via request parameters -->
	   <security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
	   <security:access-denied-handler ref="oauthAccessDeniedHandler" />
	</security:http>
	
	<!-- <http pattern="/auth/userProfile/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/auth/userProfile" access="ROLE_CLIENT,SCOPE_TRUST" />
		<intercept-url pattern="/auth/userProfile/**" access="ROLE_CLIENT,SCOPE_TRUST" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>  -->
	
	<!-- url for remote -->
	<http pattern="/auth/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
	   <anonymous enabled="false" />
	   <intercept-url pattern="/auth/userProfile" access="ROLE_USER,SCOPE_TRUST" />
	   <intercept-url pattern="/auth/userProfile/**" access="ROLE_USER,SCOPE_MOD" />
	   <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
	   <access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	<http pattern="/api/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
	   <anonymous enabled="false" />
	   <intercept-url pattern="/api/contacts" access="ROLE_USER,SCOPE_TRUST" />
	   <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
	   <access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	
	
	
	<!-- 本地用户登陆 -->
	<http access-denied-page="/login.jsp?authorization_error=true" disable-url-rewriting="true" 
		authentication-manager-ref="authenticationManager" 
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<intercept-url pattern="/settings/**" access="ROLE_USER,ROLE_ADMIN" />
		<intercept-url pattern="/local/**" access="ROLE_USER" />
		<intercept-url pattern="/api/**" access="ROLE_USER" />
		<intercept-url pattern="/auth/**" access="ROLE_USER" />
		<intercept-url pattern="/testmvc" access="ROLE_USER" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />

		<form-login authentication-failure-url="/login.jsp?authentication_error=true" default-target-url="/index.jsp"
			login-page="/login.jsp" login-processing-url="/login.do" />
		<logout logout-success-url="/index.jsp" logout-url="/logout.do" />
		<anonymous />
	</http>
	
	
	
	<!-- AuthenticationManager -->
	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>
	
	<authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider >
			<jdbc-user-service id="userDetailsService" data-source-ref="dataSource" 
		   users-by-username-query="
		      select username,password, enabled 
		      from users where username=?" 
 
		   authorities-by-username-query="
		      select u.username, ur.authority from users u, user_roles ur 
		      where u.user_id = ur.user_id and u.username =?  " 
		/>
		</authentication-provider>
	</authentication-manager>
	<!-- AuthenticationManager end-->
	
	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>
	
	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>
	
	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="oauth" />
	</bean>
	<!-- oauthAccessDeniedHandler -->
	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
	<!-- resourceServerFilter -->
	<oauth:resource-server id="resourceServerFilter" resource-id="oauth" token-services-ref="tokenServices" />
	<!-- accessDecisionManager -->
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>
</beans>
